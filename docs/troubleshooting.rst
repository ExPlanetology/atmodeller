.. _TroubleshootingFile:

Troubleshooting
===============

1. The solver fails
-------------------

*Atmodeller* assembles and solves a system of non-linear equations and thus it is subject to the typical considerations when dealing with non-linear systems. Under the hood *Atmodeller* uses the JAX solver library `optimistix <https://github.com/patrick-kidger/optimistix>`_, with its documentation available `here <https://docs.kidger.site/optimistix>`_. Pay special attention to the FAQ section. In general, the solver may fail for one of two reasons:

1. A solution cannot be found
2. The solver detects an NaN (Not a Number) or infinity generated by a function

1a. A solution cannot be found
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If a solution cannot be found, verify that a solution actually exists for your problem. Although *Atmodeller* allows you to construct a system with arbitrary user-imposed constraints (e.g., fugacity, mass), this does not guarantee a physical solution to the system. If *Atmodeller* fails to find a solution, it may simply be because no solution exists for the given constraints. To address this, try simplifying your system by reducing the number of species and/or constraints. Once a solution is obtained, incrementally increase the system's complexity to identify the point at which a solution can no longer be found.

Alternatively, a solution does exist to your problem, but the initial guess is not good enough to converge to the solution. If you think this is the problem then try adjusting the initial guess.

The following provides some additional guidance if you are facing challenges with obtaining a solution to your interior-atmosphere system:

1. Confirm that a solution exists. Although *Atmodeller* allows you to build a system of arbitrary user-imposed constraints (fugacity, mass, etc.) this does not necessarily mean that there is a physical solution to the system. If *Atmodeller* cannot find a solution it might simply be because a solution does not exist for your imposed constraints.

2. Confirm that the species chosen for your reaction network are appropriate for the pressure and temperature conditions of interest. *Atmodeller* does not perform any internal tests to determine whether or not the species you have chosen are thermodynamically stable at the specified conditions. Hence prior knowledge, intuition, or calculations with a Gibbs minimiser are required to guide the choice of species. Related, if the dynamic range of the species abundances is too large then you may encounter problems.

3. Numerical overflow can occur when the solver steps to a region of parameter space that causes a species' pressure :math:`p_i` to become too large. This is because the reaction network component of the non-linear system is formulated in terms of :math:`\log10(p_i)`, but :math:`p_i` is required for mass balance and hence :math:`10^{\log10(p_i)}` is computed. In this regard, reducing ``factor`` (`see here <https://docs.scipy.org/doc/scipy/reference/optimize.root-hybr.html#optimize-root-hybr>`_) can prevent the solver from stepping too far.

4. Simplify your system by systematically removing species and/or removing non-linear dependences. For example, oxygen fugacity buffers, real gas equations of state, and solubility relations can depend on the total pressure, which adds an additional pressure coupling between the system of equations compared to simpler ideal-gas only systems. Swapping mass constraints for pressure constraints can also help, as long as the pressure constraints are compatible with a solution (see 1 above). In short, starting with a simple ideal-gas only reaction network and adding incremental complexity is a good approach narrow down reasons why a solution cannot be found.

5. Choose an appropriate initial solution. Providing an initial solution closer to the true solution will improve the chances that the solver can locate and converge to the correct (global) minimum. You can specify the initial solution using the ``initial_solution`` argument of ``solve()`` on an ``InteriorAtmosphereSystem``. If you are systematically iterating over a set of parameters, you can often use the previous solution to the system as the initial solution for the next system with perturbed parameters.

6. The notebook `notebooks/3_monte_carlo.ipynb` shows several examples of training a regressor to improve the initial solution and therefore improve the performance of the solver.