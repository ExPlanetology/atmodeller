.. _TroubleshootingFile:

Troubleshooting
===============

The solver fails
----------------

*Atmodeller* assembles and solves a system of non-linear equations and thus it is subject to all the usual considerations when dealing with non-linear systems. Under the hood *Atmodeller* uses the JAX solver library `optimistix <https://github.com/patrick-kidger/optimistix>`_, with its documentation available `here <https://docs.kidger.site/optimistix>`_. Pay special attention to the FAQ section. Since the solution procedure is optimised by JAX it's not as straightforward to pick apart the solution process without delving into `JAX debugging <https://jax.readthedocs.io/en/latest/debugging.html>`_. However, in many cases the likely problem can be deduced based on how the solver failed:

- A solution cannot be found
- The solver detects an NaN (Not a Number) or infinity generated by a function

A solution cannot be found
~~~~~~~~~~~~~~~~~~~~~~~~~~

- The initial guess is not good enough to converge to the solution, in which case try adjusting the initial guess. If you are systematically iterating over a set of parameters in ascending/descending order you can use the previous solution to the system as the initial solution for the next system with perturbed parameters.
  
- Verify that a solution exists for your problem. Although *Atmodeller* allows you to construct a system with arbitrary user-imposed constraints (e.g., fugacity, mass), this does not guarantee a physical solution to the system. If *Atmodeller* fails to find a solution, it may simply be because no solution exists for the given constraints. To address this, try simplifying your system by reducing the number of species and/or constraints. If you are able to obtain a solution for a simpler system, incrementally increase the system's complexity to identify when a solution can no longer be found.

- *Atmodeller* uses a bounded solver with the upper and lower bounds specified in the package `__init__`. The bounds are generous, but in principle the solution could exist outside of the bounds. This could arise if you investigate very large atmospheres in the absence of solubility.

The solver detects an NaN
~~~~~~~~~~~~~~~~~~~~~~~~~

- *Atmodeller* relies on functions for thermodynamic data, solubility laws, and equations of state when solving the system. These functions are not guaranteed to be bounded for all arguments, although using the bounded solver should mostly prevent the majority of these functions from throwing NaNs. Furthermore, equations of state are bounded. Nevertheless, if the solver detects an NaN then a function in your system is not well behaved. Systematically adding and removing complexity from the system is necessary to determine which function (i.e., most likely a solubility law or EOS) is throwing an NaN.

- Thermodynamic data are generally available in *Atmodeller* between 200 K and 6000 K, although for some species the data extends up to 20,000 K. Hence calculations must be performed for temperatures that fall within valid regions.

Additional information
~~~~~~~~~~~~~~~~~~~~~~

- Some debugging commands are commented out in the package `__init__`.